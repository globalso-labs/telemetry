# Telemetry is a feature that allows you to collect and send data to a remote server.
# This data can be used to monitor the health of the system, debug issues, and more.
# The data is sent to a remote server using the HTTP protocol.
telemetry:
  # Whether global telemetry is enabled or not. If set to false, no telemetry data will be sent.
  enabled: true
  # The URL to which the telemetry data will be sent.
  endpoint: telemetry.idbi.pe
  # The protocol to use when sending telemetry data. Can be either http/https or grpc.
  protocol: https
  # The headers to include when sending telemetry data. This is a map of key-value pairs.
  headers:
    # The Organization ID header. This is used to identify the organization that is sending the telemetry data.
    x-scope-orgid: anonymous
  # The global scrape config. This config is used to scrape data from the system and send it to the remote server.
  scrape:
    # The global interval at which telemetry data will be read. This is a duration string.
    interval: 5s
  # The global push config. This config is used to send data to the remote server.
  push:
    # The global interval at which telemetry data will be sent. This is a duration string.
    interval: 30s
  # The list of agents that will be used to collect and send telemetry data.
  agent:
    # The list of additional exporters that will be used to export telemetry data.
    exporters:
      prometheusremotewrite:
        endpoint: "https://telemetry.idbi.pe/prometheus/api/v1/push"
        resource_to_telemetry_conversion:
          enabled: true
        headers:
          x-scope-orgid: anonymous
    # The list of processors that will be used to process telemetry data.
    processors:
      resourcedetection:
        detectors: ["env", "system", "ec2", "lambda", "elastic_beanstalk", "lambda"]
    # The list of receivers that will be used to receive telemetry data.
    receivers:
      # Filelog receiver is used to collect logs from a file.
      filelog:
        include: [/usr/local/var/log/nginx/error.log]
        storage: "file_storage"
      # Nginx receiver is used to collect metrics from nginx server.
      nginx:
        collection_interval: 30s
        endpoint: "http://localhost:9113/metrics"
      # Hostmetrics receiver is used to collect metrics from the host system.
      hostmetrics:
        collection_interval: 30s
        scrapers:
          cpu:
          disk:
          load:
            cpu_average: true
          filesystem:
          memory:
          network:
          paging:
          processes:
          process:
            include:
              match_type: "strict"
              names: ["goland", "nginx", "chrome"]
            metrics:
              process.cpu.utilization:
                enabled: true
              process.disk.operations:
                enabled: true
              process.memory.utilization:
                enabled: true
#            mute_process_name_error: true
#            mute_process_io_error: true
#            mute_process_exe_error: true
  # The config for the logging service . This config is used to send logs telemetry data.
  logger:
    # Whether the logger is enabled or not. If set to false, no logs will be sent to the remote server.
    enabled: true
    # The logger telemetry path. This is the path where the logger will write the telemetry data.
    path: otlp/v1/logs
    # The log level to use when printing logs. Can be either trace, debug, info, warn, error, or fatal.
    level: trace
    # The output driver to use when working logs. Can be either console or file.
    drivers: [console]
    # The hooks to use when writing logs. This is a list of hooks that will be used to send logs to the remote server.
    hooks: [sentry, otlp]
    # The logger scrape config. This config is used to scrape data from the system and send it to the remote server.
    push:
      # The logger interval at which telemetry data will be sent. This is a duration string.
      interval: 30s
  # The config for the metrics service. This config is used to send metrics telemetry data.
  meter:
    # Whether the meter is enabled or not. If set to false, no metrics will be sent to the remote server.
    enabled: true
    # The meter telemetry path. This is the path where the meter will write the telemetry data.
    path: otlp/v1/metrics
    # The meter scrape config. This config is used to scrape data from the system and send it to the remote server.
    scrape:
      # The meter interval at which telemetry data will be read. This is a duration string.
      interval: 5s
    # The meter push config. This config is used to send data to the remote server.
    push:
      # The meter interval at which telemetry data will be sent. This is a duration string.
      interval: 30s
  # The config for the tracing service. This config is used to send tracing telemetry data.
  tracer:
    # Whether the tracer is enabled or not. If set to false, no traces will be sent to the remote server.
    enabled: true
    # The tracer telemetry path. This is the path where the tracer will write the telemetry data.
    path: otlp/v1/traces
    # The tracer push config. This config is used to send data to the remote server.
    push:
      # The tracer interval at which telemetry data will be sent. This is a duration string.
      interval: 30s
